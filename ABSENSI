<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ABSENSI MOTIONLIFE MEDICAL CENTER</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .fingerprint-scanner {
            background: radial-gradient(circle, #3b82f6 0%, #1e40af 100%);
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.05); opacity: 0.8; }
        }
        
        .scan-animation {
            animation: scan 3s ease-in-out;
        }
        
        @keyframes scan {
            0% { height: 0%; }
            50% { height: 100%; }
            100% { height: 0%; }
        }
        
        .fingerprint-pattern {
            background-image: 
                radial-gradient(circle at 30% 30%, transparent 20%, rgba(255,255,255,0.1) 21%, rgba(255,255,255,0.1) 25%, transparent 26%),
                radial-gradient(circle at 70% 70%, transparent 20%, rgba(255,255,255,0.1) 21%, rgba(255,255,255,0.1) 25%, transparent 26%);
        }
        
        .shift-card {
            transition: all 0.3s ease;
        }
        
        .shift-card:hover {
            transform: translateY(-2px);
        }
        
        .shift-active {
            background: linear-gradient(135deg, #10b981, #059669);
            box-shadow: 0 4px 20px rgba(16, 185, 129, 0.3);
        }
        
        .shift-completed {
            background: linear-gradient(135deg, #6b7280, #4b5563);
        }
        
        .shift-pending {
            background: linear-gradient(135deg, #f59e0b, #d97706);
        }
    </style>
</head>
<body class="bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 min-h-screen">
    <!-- Login/Register Screen -->
    <div id="authScreen" class="min-h-screen flex items-center justify-center p-4">
        <div class="bg-white/10 backdrop-blur-lg rounded-2xl p-8 w-full max-w-md border border-white/20">
            <div class="text-center mb-8">
                <div class="w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L15 1H5C3.89 1 3 1.89 3 3V21C3 22.11 3.89 23 5 23H11V21H5V3H13V9H21Z"/>
                    </svg>
                </div>
                <h1 class="text-2xl font-bold text-white mb-2">ABSENSI MOTIONLIFE MEDICAL CENTER</h1>
                <p class="text-blue-200">Kelola kehadiran 5 shift per hari</p>
            </div>
            
            <!-- Login Form -->
            <div id="loginForm">
                <form id="loginFormElement" class="space-y-6">
                    <div>
                        <label class="block text-sm font-medium text-blue-200 mb-2">Username</label>
                        <input type="text" id="loginUsername" required 
                               class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-blue-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                               placeholder="Masukkan username">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-blue-200 mb-2">Password</label>
                        <input type="password" id="loginPassword" required 
                               class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-blue-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                               placeholder="Masukkan password">
                    </div>
                    
                    <button type="submit" 
                            class="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-4 rounded-lg transition duration-200">
                        Masuk
                    </button>
                </form>
                
                <div class="mt-6 text-center">
                    <p class="text-sm text-blue-300">Belum punya akun? 
                        <button onclick="showRegister()" class="text-blue-400 hover:text-blue-300 underline">Daftar</button>
                    </p>
                </div>
            </div>

            <!-- Register Form -->
            <div id="registerForm" class="hidden">
                <form id="registerFormElement" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-blue-200 mb-2">Nama Lengkap</label>
                        <input type="text" id="regFullName" required 
                               class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-blue-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                               placeholder="Nama lengkap">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-blue-200 mb-2">Username</label>
                        <input type="text" id="regUsername" required 
                               class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-blue-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                               placeholder="Username">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-blue-200 mb-2">Password</label>
                        <input type="password" id="regPassword" required 
                               class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-blue-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                               placeholder="Password">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-blue-200 mb-2">Jabatan</label>
                        <div class="grid grid-cols-2 gap-3">
                            <div class="position-option bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 p-3 rounded-lg cursor-pointer border-2 border-transparent transition-all duration-200" onclick="selectPosition('Executive', this)">
                                <div class="text-center">
                                    <div class="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-2">
                                        <span class="text-white font-bold text-sm">EX</span>
                                    </div>
                                    <p class="text-white text-sm font-semibold">Executive</p>
                                </div>
                            </div>
                            
                            <div class="position-option bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 p-3 rounded-lg cursor-pointer border-2 border-transparent transition-all duration-200" onclick="selectPosition('Wakil Direktur', this)">
                                <div class="text-center">
                                    <div class="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-2">
                                        <span class="text-white font-bold text-sm">WD</span>
                                    </div>
                                    <p class="text-white text-sm font-semibold">Wakil Direktur</p>
                                </div>
                            </div>
                            
                            <div class="position-option bg-gradient-to-r from-orange-600 to-orange-700 hover:from-orange-700 hover:to-orange-800 p-3 rounded-lg cursor-pointer border-2 border-transparent transition-all duration-200" onclick="selectPosition('Manajer', this)">
                                <div class="text-center">
                                    <div class="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-2">
                                        <span class="text-white font-bold text-sm">MG</span>
                                    </div>
                                    <p class="text-white text-sm font-semibold">Manajer</p>
                                </div>
                            </div>
                            
                            <div class="position-option bg-gradient-to-r from-emerald-600 to-emerald-700 hover:from-emerald-700 hover:to-emerald-800 p-3 rounded-lg cursor-pointer border-2 border-transparent transition-all duration-200" onclick="selectPosition('Dokter Spesialis', this)">
                                <div class="text-center">
                                    <div class="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-2">
                                        <span class="text-white font-bold text-sm">DS</span>
                                    </div>
                                    <p class="text-white text-sm font-semibold">Dokter Spesialis</p>
                                </div>
                            </div>
                            
                            <div class="position-option bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 p-3 rounded-lg cursor-pointer border-2 border-transparent transition-all duration-200" onclick="selectPosition('Dokter', this)">
                                <div class="text-center">
                                    <div class="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-2">
                                        <span class="text-white font-bold text-sm">DR</span>
                                    </div>
                                    <p class="text-white text-sm font-semibold">Dokter</p>
                                </div>
                            </div>
                            
                            <div class="position-option bg-gradient-to-r from-teal-600 to-teal-700 hover:from-teal-700 hover:to-teal-800 p-3 rounded-lg cursor-pointer border-2 border-transparent transition-all duration-200" onclick="selectPosition('Asisten Dokter', this)">
                                <div class="text-center">
                                    <div class="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-2">
                                        <span class="text-white font-bold text-sm">AD</span>
                                    </div>
                                    <p class="text-white text-sm font-semibold">Asisten Dokter</p>
                                </div>
                            </div>
                            
                            <div class="position-option bg-gradient-to-r from-pink-600 to-pink-700 hover:from-pink-700 hover:to-pink-800 p-3 rounded-lg cursor-pointer border-2 border-transparent transition-all duration-200" onclick="selectPosition('Perawat', this)">
                                <div class="text-center">
                                    <div class="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-2">
                                        <span class="text-white font-bold text-sm">PR</span>
                                    </div>
                                    <p class="text-white text-sm font-semibold">Perawat</p>
                                </div>
                            </div>
                            
                            <div class="position-option bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 p-3 rounded-lg cursor-pointer border-2 border-transparent transition-all duration-200" onclick="selectPosition('Training', this)">
                                <div class="text-center">
                                    <div class="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-2">
                                        <span class="text-white font-bold text-sm">TR</span>
                                    </div>
                                    <p class="text-white text-sm font-semibold">Training</p>
                                </div>
                            </div>
                        </div>
                        <input type="hidden" id="regPosition" required>
                    </div>
                    

                    
                    <button type="submit" 
                            class="w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-4 rounded-lg transition duration-200">
                        Daftar
                    </button>
                </form>
                
                <div class="mt-6 text-center">
                    <p class="text-sm text-blue-300">Sudah punya akun? 
                        <button onclick="showLogin()" class="text-blue-400 hover:text-blue-300 underline">Masuk</button>
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Dashboard -->
    <div id="dashboard" class="hidden min-h-screen">
        <!-- Header -->
        <header class="bg-white/10 backdrop-blur-lg border-b border-white/20">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center py-4">
                    <div class="flex items-center">
                        <div class="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center mr-3">
                            <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L15 1H5C3.89 1 3 1.89 3 3V21C3 22.11 3.89 23 5 23H11V21H5V3H13V9H21Z"/>
                            </svg>
                        </div>
                        <div>
                            <h1 class="text-xl font-bold text-white">ABSENSI MOTIONLIFE MEDICAL CENTER</h1>
                            <p class="text-sm text-blue-200" id="currentDateTime"></p>
                        </div>
                    </div>
                    
                    <div class="flex items-center space-x-4">
                        <div id="adminControls" class="hidden flex items-center space-x-2">
                            <button onclick="showAdminPanel()" 
                                    class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition duration-200">
                                Admin Panel
                            </button>
                        </div>
                        <div class="text-right">
                            <p class="text-white font-semibold" id="currentUserName"></p>
                            <p class="text-sm text-blue-200"><span id="currentUserPosition"></span> - <span id="currentUserDept"></span></p>
                        </div>
                        <button onclick="logout()" 
                                class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition duration-200">
                            Keluar
                        </button>
                    </div>
                </div>
            </div>
        </header>

        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <!-- Fingerprint Scanner & Shifts -->
                <div class="lg:col-span-1 space-y-6">
                    <!-- Scanner -->
                    <div class="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
                        <h2 class="text-xl font-bold text-white mb-6">Scanner Fingerprint</h2>
                        
                        <div class="flex flex-col items-center">
                            <div class="relative">
                                <div class="fingerprint-scanner fingerprint-pattern w-32 h-32 rounded-full flex items-center justify-center mb-4 relative overflow-hidden">
                                    <svg class="w-16 h-16 text-white/80" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M12 1C8.27 1 5.18 3.38 4.24 6.22C2.45 8.11 2.45 15.89 4.24 17.78C5.18 20.62 8.27 23 12 23s6.82-2.38 7.76-5.22c1.79-1.89 1.79-9.67 0-11.56C18.82 3.38 15.73 1 12 1z"/>
                                    </svg>
                                    <div id="scanLine" class="absolute top-0 left-0 w-full bg-gradient-to-r from-transparent via-white/30 to-transparent hidden"></div>
                                </div>
                            </div>
                            
                            <div class="text-center mb-4">
                                <p id="scanStatus" class="text-blue-200 mb-2">Pilih shift untuk absen</p>
                                <div class="flex items-center justify-center space-x-2">
                                    <div id="statusIndicator" class="w-3 h-3 bg-yellow-500 rounded-full"></div>
                                    <span id="statusText" class="text-sm text-blue-300">Siap</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Today's Shifts -->
                    <div class="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
                        <h3 class="text-lg font-bold text-white mb-4">Shift Hari Ini</h3>
                        <div class="space-y-3" id="todayShifts">
                            <!-- Shifts will be populated by JavaScript -->
                        </div>
                    </div>
                </div>

                <!-- Reports & Data -->
                <div class="lg:col-span-2 space-y-6">
                    <!-- Weekly Summary -->
                    <div class="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
                        <div class="flex justify-between items-center mb-6">
                            <h2 class="text-xl font-bold text-white">Ringkasan Mingguan</h2>
                            <div class="flex items-center space-x-4">
                                <div class="text-center">
                                    <p class="text-sm text-blue-300">Total Shift</p>
                                    <p id="weeklyShifts" class="text-2xl font-bold text-white">0</p>
                                </div>
                                <div class="text-center">
                                    <p class="text-sm text-blue-300">Total Jam</p>
                                    <p id="weeklyHours" class="text-2xl font-bold text-white">0</p>
                                </div>
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-7 gap-2 mb-4">
                            <div class="text-center text-xs text-blue-300 font-semibold">Sen</div>
                            <div class="text-center text-xs text-blue-300 font-semibold">Sel</div>
                            <div class="text-center text-xs text-blue-300 font-semibold">Rab</div>
                            <div class="text-center text-xs text-blue-300 font-semibold">Kam</div>
                            <div class="text-center text-xs text-blue-300 font-semibold">Jum</div>
                            <div class="text-center text-xs text-blue-300 font-semibold">Sab</div>
                            <div class="text-center text-xs text-blue-300 font-semibold">Min</div>
                        </div>
                        
                        <div id="weeklyChart" class="grid grid-cols-7 gap-2">
                            <!-- Weekly chart will be populated by JavaScript -->
                        </div>
                    </div>

                    <!-- Recent Attendance -->
                    <div class="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
                        <div class="flex justify-between items-center mb-6">
                            <h2 class="text-xl font-bold text-white">Riwayat Absensi</h2>
                            <button onclick="exportData()" 
                                    class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition duration-200">
                                Export Data
                            </button>
                        </div>
                        
                        <div class="space-y-3 max-h-96 overflow-y-auto" id="attendanceList">
                            <div class="text-center text-blue-300 py-8">
                                <svg class="w-12 h-12 mx-auto mb-3 opacity-50" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                                </svg>
                                <p>Belum ada data absensi</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Admin Panel -->
    <div id="adminPanel" class="hidden min-h-screen">
        <!-- Admin Header -->
        <header class="bg-white/10 backdrop-blur-lg border-b border-white/20">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center py-4">
                    <div class="flex items-center">
                        <div class="w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center mr-3">
                            <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12 1L3 5V11C3 16.55 6.84 21.74 12 23C17.16 21.74 21 16.55 21 11V5L12 1M12 7C13.1 7 14 7.9 14 9C14 10.1 13.1 11 12 11C10.9 11 10 10.1 10 9C10 7.9 10.9 7 12 7M12 13C13.5 13 16 13.75 16 15.25V17H8V15.25C8 13.75 10.5 13 12 13Z"/>
                            </svg>
                        </div>
                        <div>
                            <h1 class="text-xl font-bold text-white">Admin Panel</h1>
                            <p class="text-sm text-blue-200">Kelola semua data absensi</p>
                        </div>
                    </div>
                    
                    <div class="flex items-center space-x-4">
                        <button onclick="showDashboard()" 
                                class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition duration-200">
                            Kembali ke Dashboard
                        </button>
                        <button onclick="logout()" 
                                class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition duration-200">
                            Keluar
                        </button>
                    </div>
                </div>
            </div>
        </header>

        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <!-- Admin Stats -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                <div class="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
                    <div class="flex items-center">
                        <div class="w-12 h-12 bg-blue-500 rounded-lg flex items-center justify-center mr-4">
                            <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M16 4C18.2 4 20 5.8 20 8S18.2 12 16 12S12 10.2 12 8S13.8 4 16 4M16 13C18.67 13 24 14.33 24 17V20H8V17C8 14.33 13.33 13 16 13M8 4C10.21 4 12 5.79 12 8S10.21 12 8 12 4 10.21 4 8 5.79 4 8 4M8 13C10.67 13 16 14.33 16 17V20H0V17C0 14.33 5.33 13 8 13Z"/>
                            </svg>
                        </div>
                        <div>
                            <p class="text-sm text-blue-300">Total Karyawan</p>
                            <p class="text-2xl font-bold text-white" id="totalUsers">0</p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
                    <div class="flex items-center">
                        <div class="w-12 h-12 bg-green-500 rounded-lg flex items-center justify-center mr-4">
                            <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M9 11H7V9H9V11M13 11H11V9H13V11M17 11H15V9H17V11M19 3H18V1H16V3H8V1H6V3H5C3.89 3 3 3.9 3 5V19C3 20.1 3.89 21 5 21H19C20.1 21 21 20.1 21 19V5C21 3.9 20.1 3 19 3M19 19H5V8H19V19Z"/>
                            </svg>
                        </div>
                        <div>
                            <p class="text-sm text-blue-300">Absensi Hari Ini</p>
                            <p class="text-2xl font-bold text-white" id="todayAttendance">0</p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
                    <div class="flex items-center">
                        <div class="w-12 h-12 bg-orange-500 rounded-lg flex items-center justify-center mr-4">
                            <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12 2C6.48 2 2 6.48 2 12S6.48 22 12 22 22 17.52 22 12 17.48 2 12 2M13 17H11V15H13V17M13 13H11V7H13V13Z"/>
                            </svg>
                        </div>
                        <div>
                            <p class="text-sm text-blue-300">Shift Aktif</p>
                            <p class="text-2xl font-bold text-white" id="activeShifts">0</p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
                    <div class="flex items-center">
                        <div class="w-12 h-12 bg-purple-500 rounded-lg flex items-center justify-center mr-4">
                            <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M19 3H5C3.9 3 3 3.9 3 5V19C3 20.1 3.9 21 5 21H19C20.1 21 21 20.1 21 19V5C21 3.9 20.1 3 19 3M19 19H5V8H19V19M7 10H17V12H7V10M7 14H17V16H7V14Z"/>
                            </svg>
                        </div>
                        <div>
                            <p class="text-sm text-blue-300">Total Jam Minggu Ini</p>
                            <p class="text-2xl font-bold text-white" id="totalWeeklyHours">0</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Admin Tabs -->
            <div class="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 mb-8">
                <div class="flex border-b border-white/20">
                    <button onclick="showAdminTab('users')" id="usersTab" 
                            class="px-6 py-4 text-white font-semibold border-b-2 border-purple-500 bg-white/5">
                        Kelola Karyawan
                    </button>
                    <button onclick="showAdminTab('attendance')" id="attendanceTab" 
                            class="px-6 py-4 text-blue-300 font-semibold hover:text-white hover:bg-white/5 transition duration-200">
                        Data Absensi
                    </button>
                    <button onclick="showAdminTab('reports')" id="reportsTab" 
                            class="px-6 py-4 text-blue-300 font-semibold hover:text-white hover:bg-white/5 transition duration-200">
                        Laporan
                    </button>
                </div>

                <!-- Users Management Tab -->
                <div id="usersContent" class="p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-white">Daftar Karyawan</h3>
                        <div class="flex space-x-3">
                            <button onclick="exportAllUsers()" 
                                    class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition duration-200">
                                Export Karyawan
                            </button>
                            <button onclick="deleteAllData()" 
                                    class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition duration-200">
                                Reset Semua Data
                            </button>
                        </div>
                    </div>
                    
                    <div class="overflow-x-auto">
                        <table class="w-full text-left">
                            <thead>
                                <tr class="border-b border-white/20">
                                    <th class="pb-3 text-blue-300 font-semibold">Nama</th>
                                    <th class="pb-3 text-blue-300 font-semibold">Username</th>
                                    <th class="pb-3 text-blue-300 font-semibold">Jabatan</th>
                                    <th class="pb-3 text-blue-300 font-semibold">Departemen</th>
                                    <th class="pb-3 text-blue-300 font-semibold">Terdaftar</th>
                                    <th class="pb-3 text-blue-300 font-semibold">Aksi</th>
                                </tr>
                            </thead>
                            <tbody id="usersTable">
                                <!-- Users will be populated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Attendance Data Tab -->
                <div id="attendanceContent" class="p-6 hidden">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-white">Data Absensi Semua Karyawan</h3>
                        <div class="flex space-x-3">
                            <select id="filterUser" class="bg-white/10 border border-white/20 rounded-lg text-white px-4 py-2">
                                <option value="">Semua Karyawan</option>
                            </select>
                            <button onclick="exportAllAttendance()" 
                                    class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition duration-200">
                                Export Absensi
                            </button>
                        </div>
                    </div>
                    
                    <div class="space-y-3 max-h-96 overflow-y-auto" id="allAttendanceList">
                        <!-- Attendance data will be populated by JavaScript -->
                    </div>
                </div>

                <!-- Reports Tab -->
                <div id="reportsContent" class="p-6 hidden">
                    <h3 class="text-xl font-bold text-white mb-6">Laporan Komprehensif</h3>
                    
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <!-- Position Distribution -->
                        <div class="bg-white/5 rounded-lg p-4">
                            <h4 class="font-semibold text-white mb-4">Distribusi Jabatan</h4>
                            <div id="positionChart" class="space-y-2">
                                <!-- Position chart will be populated by JavaScript -->
                            </div>
                        </div>
                        
                        <!-- Department Distribution -->
                        <div class="bg-white/5 rounded-lg p-4">
                            <h4 class="font-semibold text-white mb-4">Distribusi Departemen</h4>
                            <div id="departmentChart" class="space-y-2">
                                <!-- Department chart will be populated by JavaScript -->
                            </div>
                        </div>
                        
                        <!-- Weekly Performance -->
                        <div class="bg-white/5 rounded-lg p-4 lg:col-span-2">
                            <h4 class="font-semibold text-white mb-4">Performa Mingguan</h4>
                            <div id="weeklyPerformance" class="space-y-3">
                                <!-- Weekly performance will be populated by JavaScript -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Data storage
        let users = JSON.parse(localStorage.getItem('multiShiftUsers')) || [];
        let attendanceData = JSON.parse(localStorage.getItem('multiShiftAttendance')) || [];
        let currentUser = null;

        // Shift definitions
        const shifts = [
            { id: 1, name: 'Shift 1', start: '06:00', end: '14:00', duration: 8 },
            { id: 2, name: 'Shift 2', start: '14:00', end: '22:00', duration: 8 },
            { id: 3, name: 'Shift 3', start: '22:00', end: '06:00', duration: 8 },
            { id: 4, name: 'Shift 4', start: '08:00', end: '16:00', duration: 8 },
            { id: 5, name: 'Shift 5', start: '16:00', end: '00:00', duration: 8 }
        ];

        // Initialize admin account
        function initializeAdmin() {
            // Create admin account if it doesn't exist
            const adminExists = users.find(user => user.username === 'admin');
            if (!adminExists) {
                const adminUser = {
                    id: 'admin-001',
                    fullName: 'Administrator',
                    username: 'admin',
                    password: 'admin123',
                    position: 'Administrator',
                    department: 'Manajemen',
                    isAdmin: true,
                    registeredAt: new Date().toISOString()
                };
                users.push(adminUser);
                localStorage.setItem('multiShiftUsers', JSON.stringify(users));
            }
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            initializeAdmin();
            updateDateTime();
            setInterval(updateDateTime, 1000);
        });

        // Update current date time
        function updateDateTime() {
            const now = new Date();
            const options = { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            };
            if (document.getElementById('currentDateTime')) {
                document.getElementById('currentDateTime').textContent = now.toLocaleDateString('id-ID', options);
            }
        }

        // Show register form
        function showRegister() {
            document.getElementById('loginForm').classList.add('hidden');
            document.getElementById('registerForm').classList.remove('hidden');
        }

        // Show login form
        function showLogin() {
            document.getElementById('registerForm').classList.add('hidden');
            document.getElementById('loginForm').classList.remove('hidden');
        }

        // Select position function
        function selectPosition(position, element) {
            // Remove selection from all position options
            document.querySelectorAll('.position-option').forEach(option => {
                option.classList.remove('border-white', 'ring-2', 'ring-white');
                option.classList.add('border-transparent');
            });
            
            // Add selection to clicked option
            element.classList.remove('border-transparent');
            element.classList.add('border-white', 'ring-2', 'ring-white');
            
            // Set the hidden input value
            document.getElementById('regPosition').value = position;
        }

        // Register functionality
        document.getElementById('registerFormElement').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const fullName = document.getElementById('regFullName').value;
            const username = document.getElementById('regUsername').value;
            const password = document.getElementById('regPassword').value;
            const position = document.getElementById('regPosition').value;
            
            if (!position) {
                alert('Silakan pilih jabatan terlebih dahulu!');
                return;
            }
            
            // Check if username already exists
            if (users.find(user => user.username === username)) {
                alert('Username sudah digunakan!');
                return;
            }
            
            // Auto-assign department based on position
            let department = 'Umum';
            if (position.includes('Dokter') || position === 'Asisten Dokter') {
                department = 'Medis';
            } else if (position === 'Perawat') {
                department = 'Keperawatan';
            } else if (position === 'Executive' || position === 'Wakil Direktur' || position === 'Manajer') {
                department = 'Manajemen';
            } else if (position === 'Training') {
                department = 'Pengembangan';
            }
            
            // Create new user
            const newUser = {
                id: Date.now().toString(),
                fullName,
                username,
                password,
                position,
                department,
                registeredAt: new Date().toISOString()
            };
            
            users.push(newUser);
            localStorage.setItem('multiShiftUsers', JSON.stringify(users));
            
            alert('Registrasi berhasil! Silakan login.');
            showLogin();
            
            // Clear form
            document.getElementById('registerFormElement').reset();
            // Reset position selection
            document.querySelectorAll('.position-option').forEach(option => {
                option.classList.remove('border-white', 'ring-2', 'ring-white');
                option.classList.add('border-transparent');
            });
        });

        // Login functionality
        document.getElementById('loginFormElement').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const username = document.getElementById('loginUsername').value;
            const password = document.getElementById('loginPassword').value;
            
            const user = users.find(u => u.username === username && u.password === password);
            
            if (user) {
                currentUser = user;
                document.getElementById('currentUserName').textContent = user.fullName;
                document.getElementById('currentUserPosition').textContent = user.position;
                document.getElementById('currentUserDept').textContent = user.department;
                document.getElementById('authScreen').classList.add('hidden');
                document.getElementById('dashboard').classList.remove('hidden');
                
                // Show admin controls if user is admin
                if (user.isAdmin) {
                    document.getElementById('adminControls').classList.remove('hidden');
                }
                
                loadDashboard();
            } else {
                alert('Username atau password salah!');
            }
        });

        // Logout functionality
        function logout() {
            currentUser = null;
            document.getElementById('authScreen').classList.remove('hidden');
            document.getElementById('dashboard').classList.add('hidden');
            document.getElementById('loginFormElement').reset();
        }

        // Clock In/Out for specific shift
        function clockShift(shiftId, action) {
            if (!currentUser) return;
            
            const today = new Date().toDateString();
            const shift = shifts.find(s => s.id === shiftId);
            
            let existingRecord = attendanceData.find(record => 
                record.userId === currentUser.id && 
                new Date(record.date).toDateString() === today &&
                record.shiftId === shiftId
            );
            
            if (action === 'in') {
                if (existingRecord && existingRecord.clockIn) {
                    alert(`Anda sudah clock in untuk ${shift.name}!`);
                    return;
                }
            } else {
                if (!existingRecord || !existingRecord.clockIn) {
                    alert(`Anda belum clock in untuk ${shift.name}!`);
                    return;
                }
                if (existingRecord.clockOut) {
                    alert(`Anda sudah clock out untuk ${shift.name}!`);
                    return;
                }
            }
            
            simulateScan(shiftId, action);
        }

        // Simulate fingerprint scan
        function simulateScan(shiftId, action) {
            const scanStatus = document.getElementById('scanStatus');
            const statusIndicator = document.getElementById('statusIndicator');
            const statusText = document.getElementById('statusText');
            const scanLine = document.getElementById('scanLine');
            const shift = shifts.find(s => s.id === shiftId);

            // Start scanning animation
            scanStatus.textContent = `Scanning untuk ${shift.name}...`;
            statusIndicator.className = 'w-3 h-3 bg-blue-500 rounded-full animate-pulse';
            statusText.textContent = 'Scanning';
            
            // Show scan line animation
            scanLine.classList.remove('hidden');
            scanLine.classList.add('scan-animation');

            // Simulate scanning process
            setTimeout(() => {
                const now = new Date();
                const today = now.toDateString();
                
                let record = attendanceData.find(r => 
                    r.userId === currentUser.id && 
                    new Date(r.date).toDateString() === today &&
                    r.shiftId === shiftId
                );
                
                if (!record) {
                    record = {
                        id: Date.now().toString(),
                        userId: currentUser.id,
                        userName: currentUser.fullName,
                        position: currentUser.position,
                        department: currentUser.department,
                        date: now.toISOString(),
                        shiftId: shiftId,
                        shiftName: shift.name,
                        clockIn: null,
                        clockOut: null
                    };
                    attendanceData.push(record);
                }
                
                if (action === 'in') {
                    record.clockIn = now.toISOString();
                    scanStatus.textContent = `Clock In ${shift.name} berhasil!`;
                } else {
                    record.clockOut = now.toISOString();
                    scanStatus.textContent = `Clock Out ${shift.name} berhasil!`;
                }
                
                localStorage.setItem('multiShiftAttendance', JSON.stringify(attendanceData));
                
                // Update UI
                statusIndicator.className = 'w-3 h-3 bg-green-500 rounded-full';
                statusText.textContent = 'Berhasil';
                
                // Hide scan line
                scanLine.classList.add('hidden');
                scanLine.classList.remove('scan-animation');
                
                // Refresh dashboard
                loadDashboard();
                
                // Reset status after 3 seconds
                setTimeout(() => {
                    scanStatus.textContent = 'Pilih shift untuk absen';
                    statusIndicator.className = 'w-3 h-3 bg-yellow-500 rounded-full';
                    statusText.textContent = 'Siap';
                }, 3000);
                
            }, 3000);
        }

        // Load dashboard data
        function loadDashboard() {
            loadTodayShifts();
            loadAttendanceList();
            loadWeeklyReport();
        }

        // Load today's shifts
        function loadTodayShifts() {
            const todayShifts = document.getElementById('todayShifts');
            const today = new Date().toDateString();
            
            const shiftsHtml = shifts.map(shift => {
                const record = attendanceData.find(r => 
                    r.userId === currentUser.id && 
                    new Date(r.date).toDateString() === today &&
                    r.shiftId === shift.id
                );
                
                let status = 'pending';
                let statusText = 'Belum Absen';
                let statusColor = 'shift-pending';
                let clockInTime = '-';
                let clockOutTime = '-';
                
                if (record) {
                    if (record.clockIn && record.clockOut) {
                        status = 'completed';
                        statusText = 'Selesai';
                        statusColor = 'shift-completed';
                        clockInTime = new Date(record.clockIn).toLocaleTimeString('id-ID', {hour: '2-digit', minute: '2-digit'});
                        clockOutTime = new Date(record.clockOut).toLocaleTimeString('id-ID', {hour: '2-digit', minute: '2-digit'});
                    } else if (record.clockIn) {
                        status = 'active';
                        statusText = 'Sedang Aktif';
                        statusColor = 'shift-active';
                        clockInTime = new Date(record.clockIn).toLocaleTimeString('id-ID', {hour: '2-digit', minute: '2-digit'});
                    }
                }
                
                return `
                    <div class="shift-card ${statusColor} rounded-lg p-4 border border-white/20">
                        <div class="flex justify-between items-center mb-3">
                            <div>
                                <h4 class="font-semibold text-white">${shift.name}</h4>
                                <p class="text-sm text-white/80">${shift.start} - ${shift.end}</p>
                            </div>
                            <div class="text-right">
                                <span class="text-xs text-white/90 bg-white/20 px-2 py-1 rounded">${statusText}</span>
                            </div>
                        </div>
                        
                        <div class="flex justify-between items-center text-sm text-white/80 mb-3">
                            <span>Masuk: ${clockInTime}</span>
                            <span>Keluar: ${clockOutTime}</span>
                        </div>
                        
                        <div class="grid grid-cols-2 gap-2">
                            <button onclick="clockShift(${shift.id}, 'in')" 
                                    ${status === 'completed' || (status === 'active') ? 'disabled' : ''}
                                    class="bg-green-600 hover:bg-green-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white text-sm py-2 px-3 rounded transition duration-200">
                                Clock In
                            </button>
                            <button onclick="clockShift(${shift.id}, 'out')" 
                                    ${status === 'pending' || status === 'completed' ? 'disabled' : ''}
                                    class="bg-red-600 hover:bg-red-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white text-sm py-2 px-3 rounded transition duration-200">
                                Clock Out
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
            
            todayShifts.innerHTML = shiftsHtml;
        }

        // Load attendance list
        function loadAttendanceList() {
            const attendanceList = document.getElementById('attendanceList');
            const userRecords = attendanceData
                .filter(record => record.userId === currentUser.id)
                .sort((a, b) => new Date(b.date) - new Date(a.date))
                .slice(0, 15);
            
            if (userRecords.length === 0) {
                attendanceList.innerHTML = `
                    <div class="text-center text-blue-300 py-8">
                        <svg class="w-12 h-12 mx-auto mb-3 opacity-50" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                        </svg>
                        <p>Belum ada data absensi</p>
                    </div>
                `;
                return;
            }
            
            attendanceList.innerHTML = userRecords.map(record => {
                const date = new Date(record.date);
                const clockIn = record.clockIn ? new Date(record.clockIn).toLocaleTimeString('id-ID', {hour: '2-digit', minute: '2-digit'}) : '-';
                const clockOut = record.clockOut ? new Date(record.clockOut).toLocaleTimeString('id-ID', {hour: '2-digit', minute: '2-digit'}) : '-';
                
                let hours = 0;
                let status = 'Belum Lengkap';
                let statusColor = 'bg-yellow-600';
                
                if (record.clockIn && record.clockOut) {
                    hours = (new Date(record.clockOut) - new Date(record.clockIn)) / (1000 * 60 * 60);
                    status = `${hours.toFixed(1)} jam`;
                    statusColor = hours >= 7 ? 'bg-green-600' : 'bg-orange-600';
                }
                
                return `
                    <div class="bg-white/5 rounded-lg p-4 border border-white/10">
                        <div class="flex justify-between items-start mb-2">
                            <div>
                                <h3 class="font-semibold text-white">${date.toLocaleDateString('id-ID', {weekday: 'long', day: 'numeric', month: 'long'})}</h3>
                                <p class="text-sm text-blue-300">${record.shiftName}</p>
                                <div class="flex items-center space-x-4 text-sm text-blue-300">
                                    <span>Masuk: ${clockIn}</span>
                                    <span>Keluar: ${clockOut}</span>
                                </div>
                            </div>
                            <div class="${statusColor} text-white text-xs px-2 py-1 rounded">
                                ${status}
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Load weekly report
        function loadWeeklyReport() {
            const now = new Date();
            const startOfWeek = new Date(now);
            startOfWeek.setDate(now.getDate() - now.getDay() + 1); // Monday
            
            const weeklyChart = document.getElementById('weeklyChart');
            const weeklyShiftsElement = document.getElementById('weeklyShifts');
            const weeklyHoursElement = document.getElementById('weeklyHours');
            
            let totalWeeklyShifts = 0;
            let totalWeeklyHours = 0;
            const weekDays = [];
            
            for (let i = 0; i < 7; i++) {
                const day = new Date(startOfWeek);
                day.setDate(startOfWeek.getDate() + i);
                
                const dayRecords = attendanceData.filter(record => 
                    record.userId === currentUser.id && 
                    new Date(record.date).toDateString() === day.toDateString()
                );
                
                let dayShifts = 0;
                let dayHours = 0;
                
                dayRecords.forEach(record => {
                    if (record.clockIn && record.clockOut) {
                        dayShifts++;
                        dayHours += (new Date(record.clockOut) - new Date(record.clockIn)) / (1000 * 60 * 60);
                    }
                });
                
                totalWeeklyShifts += dayShifts;
                totalWeeklyHours += dayHours;
                
                const isToday = day.toDateString() === now.toDateString();
                const isFuture = day > now;
                
                let bgColor = 'bg-gray-600';
                let height = 'h-8';
                
                if (isFuture) {
                    bgColor = 'bg-gray-700';
                } else if (dayShifts >= 3) {
                    bgColor = 'bg-green-500';
                    height = 'h-16';
                } else if (dayShifts >= 2) {
                    bgColor = 'bg-blue-500';
                    height = 'h-12';
                } else if (dayShifts >= 1) {
                    bgColor = 'bg-orange-500';
                    height = 'h-8';
                } else {
                    bgColor = 'bg-red-500';
                    height = 'h-4';
                }
                
                weekDays.push(`
                    <div class="flex flex-col items-center">
                        <div class="${bgColor} ${height} w-8 rounded-t ${isToday ? 'ring-2 ring-white' : ''} mb-1"></div>
                        <span class="text-xs text-blue-300">${day.getDate()}</span>
                        <span class="text-xs text-blue-400">${dayShifts}s</span>
                        <span class="text-xs text-blue-400">${dayHours > 0 ? dayHours.toFixed(1) + 'j' : ''}</span>
                    </div>
                `);
            }
            
            weeklyChart.innerHTML = weekDays.join('');
            weeklyShiftsElement.textContent = totalWeeklyShifts;
            weeklyHoursElement.textContent = `${totalWeeklyHours.toFixed(1)}j`;
        }

        // Export data to Excel
        function exportData() {
            const userRecords = attendanceData.filter(record => record.userId === currentUser.id);
            
            if (userRecords.length === 0) {
                alert('Tidak ada data untuk diekspor!');
                return;
            }
            
            // Create Excel content with proper formatting
            const excelContent = `
                <html>
                <head>
                    <meta charset="UTF-8">
                    <style>
                        table { border-collapse: collapse; width: 100%; }
                        th, td { border: 1px solid #000; padding: 8px; text-align: left; }
                        th { background-color: #4472C4; color: white; font-weight: bold; }
                        .center { text-align: center; }
                        .number { text-align: right; }
                    </style>
                </head>
                <body>
                    <h2>Laporan Absensi MOTIONLIFE MEDICAL CENTER</h2>
                    <p><strong>Nama:</strong> ${currentUser.fullName}</p>
                    <p><strong>Jabatan:</strong> ${currentUser.position}</p>
                    <p><strong>Departemen:</strong> ${currentUser.department}</p>
                    <p><strong>Tanggal Export:</strong> ${new Date().toLocaleDateString('id-ID')}</p>
                    <br>
                    <table>
                        <thead>
                            <tr>
                                <th>No</th>
                                <th>Tanggal</th>
                                <th>Hari</th>
                                <th>Shift</th>
                                <th>Jam Masuk</th>
                                <th>Jam Keluar</th>
                                <th>Total Jam</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${userRecords.map((record, index) => {
                                const date = new Date(record.date);
                                const clockIn = record.clockIn ? new Date(record.clockIn).toLocaleTimeString('id-ID', {hour: '2-digit', minute: '2-digit'}) : '-';
                                const clockOut = record.clockOut ? new Date(record.clockOut).toLocaleTimeString('id-ID', {hour: '2-digit', minute: '2-digit'}) : '-';
                                
                                let hours = 0;
                                let status = 'Belum Lengkap';
                                let statusColor = '#FFC107';
                                
                                if (record.clockIn && record.clockOut) {
                                    hours = (new Date(record.clockOut) - new Date(record.clockIn)) / (1000 * 60 * 60);
                                    status = hours >= 7 ? 'Lengkap' : 'Kurang';
                                    statusColor = hours >= 7 ? '#28A745' : '#FD7E14';
                                }
                                
                                return `
                                    <tr>
                                        <td class="center">${index + 1}</td>
                                        <td class="center">${date.toLocaleDateString('id-ID')}</td>
                                        <td>${date.toLocaleDateString('id-ID', {weekday: 'long'})}</td>
                                        <td class="center">${record.shiftName}</td>
                                        <td class="center">${clockIn}</td>
                                        <td class="center">${clockOut}</td>
                                        <td class="number">${hours > 0 ? hours.toFixed(1) + ' jam' : '-'}</td>
                                        <td class="center" style="background-color: ${statusColor}; color: white;">${status}</td>
                                    </tr>
                                `;
                            }).join('')}
                        </tbody>
                    </table>
                    <br>
                    <p><strong>Total Record:</strong> ${userRecords.length} absensi</p>
                    <p><strong>Total Shift Lengkap:</strong> ${userRecords.filter(r => r.clockIn && r.clockOut && (new Date(r.clockOut) - new Date(r.clockIn)) / (1000 * 60 * 60) >= 7).length}</p>
                    <p><strong>Total Jam Kerja:</strong> ${userRecords.reduce((total, record) => {
                        if (record.clockIn && record.clockOut) {
                            return total + (new Date(record.clockOut) - new Date(record.clockIn)) / (1000 * 60 * 60);
                        }
                        return total;
                    }, 0).toFixed(1)} jam</p>
                </body>
                </html>
            `;
            
            const blob = new Blob([excelContent], { 
                type: 'application/vnd.ms-excel;charset=utf-8' 
            });
            
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `Absensi_${currentUser.fullName.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.xls`;
            
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
            
            // Show success message
            setTimeout(() => {
                alert('File Excel berhasil didownload! Silakan cek folder Downloads Anda.');
            }, 500);
        }

        // Admin Functions
        function showAdminPanel() {
            document.getElementById('dashboard').classList.add('hidden');
            document.getElementById('adminPanel').classList.remove('hidden');
            loadAdminData();
        }

        function showDashboard() {
            document.getElementById('adminPanel').classList.add('hidden');
            document.getElementById('dashboard').classList.remove('hidden');
            loadDashboard();
        }

        function showAdminTab(tabName) {
            // Hide all tabs
            document.getElementById('usersContent').classList.add('hidden');
            document.getElementById('attendanceContent').classList.add('hidden');
            document.getElementById('reportsContent').classList.add('hidden');
            
            // Reset tab styles
            document.getElementById('usersTab').className = 'px-6 py-4 text-blue-300 font-semibold hover:text-white hover:bg-white/5 transition duration-200';
            document.getElementById('attendanceTab').className = 'px-6 py-4 text-blue-300 font-semibold hover:text-white hover:bg-white/5 transition duration-200';
            document.getElementById('reportsTab').className = 'px-6 py-4 text-blue-300 font-semibold hover:text-white hover:bg-white/5 transition duration-200';
            
            // Show selected tab
            document.getElementById(tabName + 'Content').classList.remove('hidden');
            document.getElementById(tabName + 'Tab').className = 'px-6 py-4 text-white font-semibold border-b-2 border-purple-500 bg-white/5';
            
            if (tabName === 'attendance') {
                loadAllAttendance();
            } else if (tabName === 'reports') {
                loadReports();
            }
        }

        function loadAdminData() {
            loadAdminStats();
            loadUsersTable();
            loadAllAttendance();
            loadReports();
        }

        function loadAdminStats() {
            const totalUsers = users.filter(u => !u.isAdmin).length;
            const today = new Date().toDateString();
            const todayAttendance = attendanceData.filter(record => 
                new Date(record.date).toDateString() === today
            ).length;
            
            const activeShifts = attendanceData.filter(record => 
                new Date(record.date).toDateString() === today && 
                record.clockIn && !record.clockOut
            ).length;
            
            // Calculate total weekly hours
            const now = new Date();
            const startOfWeek = new Date(now);
            startOfWeek.setDate(now.getDate() - now.getDay() + 1);
            
            let totalWeeklyHours = 0;
            for (let i = 0; i < 7; i++) {
                const day = new Date(startOfWeek);
                day.setDate(startOfWeek.getDate() + i);
                
                const dayRecords = attendanceData.filter(record => 
                    new Date(record.date).toDateString() === day.toDateString()
                );
                
                dayRecords.forEach(record => {
                    if (record.clockIn && record.clockOut) {
                        totalWeeklyHours += (new Date(record.clockOut) - new Date(record.clockIn)) / (1000 * 60 * 60);
                    }
                });
            }
            
            document.getElementById('totalUsers').textContent = totalUsers;
            document.getElementById('todayAttendance').textContent = todayAttendance;
            document.getElementById('activeShifts').textContent = activeShifts;
            document.getElementById('totalWeeklyHours').textContent = totalWeeklyHours.toFixed(1) + 'j';
        }

        function loadUsersTable() {
            const usersTable = document.getElementById('usersTable');
            const regularUsers = users.filter(u => !u.isAdmin);
            
            if (regularUsers.length === 0) {
                usersTable.innerHTML = `
                    <tr>
                        <td colspan="6" class="py-8 text-center text-blue-300">Belum ada karyawan terdaftar</td>
                    </tr>
                `;
                return;
            }
            
            usersTable.innerHTML = regularUsers.map(user => {
                const registeredDate = new Date(user.registeredAt).toLocaleDateString('id-ID');
                return `
                    <tr class="border-b border-white/10">
                        <td class="py-3 text-white">${user.fullName}</td>
                        <td class="py-3 text-blue-300">${user.username}</td>
                        <td class="py-3 text-blue-300">${user.position}</td>
                        <td class="py-3 text-blue-300">${user.department}</td>
                        <td class="py-3 text-blue-300">${registeredDate}</td>
                        <td class="py-3">
                            <button onclick="deleteUser('${user.id}')" 
                                    class="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm transition duration-200">
                                Hapus
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        function loadAllAttendance() {
            const allAttendanceList = document.getElementById('allAttendanceList');
            const filterUser = document.getElementById('filterUser');
            
            // Populate filter dropdown
            const regularUsers = users.filter(u => !u.isAdmin);
            filterUser.innerHTML = '<option value="">Semua Karyawan</option>' + 
                regularUsers.map(user => `<option value="${user.id}">${user.fullName}</option>`).join('');
            
            const selectedUserId = filterUser.value;
            let filteredRecords = attendanceData;
            
            if (selectedUserId) {
                filteredRecords = attendanceData.filter(record => record.userId === selectedUserId);
            }
            
            const sortedRecords = filteredRecords
                .sort((a, b) => new Date(b.date) - new Date(a.date))
                .slice(0, 50);
            
            if (sortedRecords.length === 0) {
                allAttendanceList.innerHTML = `
                    <div class="text-center text-blue-300 py-8">
                        <p>Belum ada data absensi</p>
                    </div>
                `;
                return;
            }
            
            allAttendanceList.innerHTML = sortedRecords.map(record => {
                const date = new Date(record.date);
                const clockIn = record.clockIn ? new Date(record.clockIn).toLocaleTimeString('id-ID', {hour: '2-digit', minute: '2-digit'}) : '-';
                const clockOut = record.clockOut ? new Date(record.clockOut).toLocaleTimeString('id-ID', {hour: '2-digit', minute: '2-digit'}) : '-';
                
                let hours = 0;
                let status = 'Belum Lengkap';
                let statusColor = 'bg-yellow-600';
                
                if (record.clockIn && record.clockOut) {
                    hours = (new Date(record.clockOut) - new Date(record.clockIn)) / (1000 * 60 * 60);
                    status = `${hours.toFixed(1)} jam`;
                    statusColor = hours >= 7 ? 'bg-green-600' : 'bg-orange-600';
                }
                
                return `
                    <div class="bg-white/5 rounded-lg p-4 border border-white/10">
                        <div class="flex justify-between items-start mb-2">
                            <div>
                                <h3 class="font-semibold text-white">${record.userName}</h3>
                                <p class="text-sm text-blue-300">${record.position} - ${record.department}</p>
                                <p class="text-sm text-blue-300">${date.toLocaleDateString('id-ID', {weekday: 'long', day: 'numeric', month: 'long'})} - ${record.shiftName}</p>
                                <div class="flex items-center space-x-4 text-sm text-blue-300">
                                    <span>Masuk: ${clockIn}</span>
                                    <span>Keluar: ${clockOut}</span>
                                </div>
                            </div>
                            <div class="${statusColor} text-white text-xs px-2 py-1 rounded">
                                ${status}
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function loadReports() {
            loadPositionChart();
            loadDepartmentChart();
            loadWeeklyPerformance();
        }

        function loadPositionChart() {
            const positionChart = document.getElementById('positionChart');
            const regularUsers = users.filter(u => !u.isAdmin);
            const positionCounts = {};
            
            regularUsers.forEach(user => {
                positionCounts[user.position] = (positionCounts[user.position] || 0) + 1;
            });
            
            const total = regularUsers.length;
            
            positionChart.innerHTML = Object.entries(positionCounts).map(([position, count]) => {
                const percentage = total > 0 ? (count / total * 100).toFixed(1) : 0;
                return `
                    <div class="flex justify-between items-center">
                        <span class="text-blue-300">${position}</span>
                        <div class="flex items-center space-x-2">
                            <div class="w-20 bg-white/20 rounded-full h-2">
                                <div class="bg-blue-500 h-2 rounded-full" style="width: ${percentage}%"></div>
                            </div>
                            <span class="text-white text-sm">${count}</span>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function loadDepartmentChart() {
            const departmentChart = document.getElementById('departmentChart');
            const regularUsers = users.filter(u => !u.isAdmin);
            const departmentCounts = {};
            
            regularUsers.forEach(user => {
                departmentCounts[user.department] = (departmentCounts[user.department] || 0) + 1;
            });
            
            const total = regularUsers.length;
            
            departmentChart.innerHTML = Object.entries(departmentCounts).map(([department, count]) => {
                const percentage = total > 0 ? (count / total * 100).toFixed(1) : 0;
                return `
                    <div class="flex justify-between items-center">
                        <span class="text-blue-300">${department}</span>
                        <div class="flex items-center space-x-2">
                            <div class="w-20 bg-white/20 rounded-full h-2">
                                <div class="bg-green-500 h-2 rounded-full" style="width: ${percentage}%"></div>
                            </div>
                            <span class="text-white text-sm">${count}</span>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function loadWeeklyPerformance() {
            const weeklyPerformance = document.getElementById('weeklyPerformance');
            const regularUsers = users.filter(u => !u.isAdmin);
            
            const userPerformance = regularUsers.map(user => {
                const now = new Date();
                const startOfWeek = new Date(now);
                startOfWeek.setDate(now.getDate() - now.getDay() + 1);
                
                let totalShifts = 0;
                let totalHours = 0;
                
                for (let i = 0; i < 7; i++) {
                    const day = new Date(startOfWeek);
                    day.setDate(startOfWeek.getDate() + i);
                    
                    const dayRecords = attendanceData.filter(record => 
                        record.userId === user.id && 
                        new Date(record.date).toDateString() === day.toDateString()
                    );
                    
                    dayRecords.forEach(record => {
                        if (record.clockIn && record.clockOut) {
                            totalShifts++;
                            totalHours += (new Date(record.clockOut) - new Date(record.clockIn)) / (1000 * 60 * 60);
                        }
                    });
                }
                
                return { user, totalShifts, totalHours };
            }).sort((a, b) => b.totalHours - a.totalHours);
            
            weeklyPerformance.innerHTML = userPerformance.map(({ user, totalShifts, totalHours }) => `
                <div class="flex justify-between items-center bg-white/5 rounded p-3">
                    <div>
                        <p class="text-white font-semibold">${user.fullName}</p>
                        <p class="text-sm text-blue-300">${user.position} - ${user.department}</p>
                    </div>
                    <div class="text-right">
                        <p class="text-white font-semibold">${totalShifts} shift</p>
                        <p class="text-sm text-blue-300">${totalHours.toFixed(1)} jam</p>
                    </div>
                </div>
            `).join('');
        }

        function deleteUser(userId) {
            if (confirm('Apakah Anda yakin ingin menghapus karyawan ini? Data absensi juga akan terhapus.')) {
                users = users.filter(user => user.id !== userId);
                attendanceData = attendanceData.filter(record => record.userId !== userId);
                
                localStorage.setItem('multiShiftUsers', JSON.stringify(users));
                localStorage.setItem('multiShiftAttendance', JSON.stringify(attendanceData));
                
                loadAdminData();
                alert('Karyawan berhasil dihapus!');
            }
        }

        function exportAllUsers() {
            const regularUsers = users.filter(u => !u.isAdmin);
            
            if (regularUsers.length === 0) {
                alert('Tidak ada data karyawan untuk diekspor!');
                return;
            }
            
            // Create Excel content for users
            const excelContent = `
                <html>
                <head>
                    <meta charset="UTF-8">
                    <style>
                        table { border-collapse: collapse; width: 100%; }
                        th, td { border: 1px solid #000; padding: 8px; text-align: left; }
                        th { background-color: #4472C4; color: white; font-weight: bold; }
                        .center { text-align: center; }
                    </style>
                </head>
                <body>
                    <h2>Daftar Karyawan MOTIONLIFE MEDICAL CENTER</h2>
                    <p><strong>Tanggal Export:</strong> ${new Date().toLocaleDateString('id-ID')}</p>
                    <p><strong>Total Karyawan:</strong> ${regularUsers.length} orang</p>
                    <br>
                    <table>
                        <thead>
                            <tr>
                                <th>No</th>
                                <th>Nama Lengkap</th>
                                <th>Username</th>
                                <th>Jabatan</th>
                                <th>Departemen</th>
                                <th>Tanggal Daftar</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${regularUsers.map((user, index) => `
                                <tr>
                                    <td class="center">${index + 1}</td>
                                    <td>${user.fullName}</td>
                                    <td class="center">${user.username}</td>
                                    <td>${user.position}</td>
                                    <td class="center">${user.department}</td>
                                    <td class="center">${new Date(user.registeredAt).toLocaleDateString('id-ID')}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                    <br>
                    <h3>Ringkasan Departemen:</h3>
                    <table style="width: 50%;">
                        <thead>
                            <tr>
                                <th>Departemen</th>
                                <th>Jumlah</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${Object.entries(regularUsers.reduce((acc, user) => {
                                acc[user.department] = (acc[user.department] || 0) + 1;
                                return acc;
                            }, {})).map(([dept, count]) => `
                                <tr>
                                    <td>${dept}</td>
                                    <td class="center">${count}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </body>
                </html>
            `;
            
            const blob = new Blob([excelContent], { 
                type: 'application/vnd.ms-excel;charset=utf-8' 
            });
            
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `Daftar_Karyawan_${new Date().toISOString().split('T')[0]}.xls`;
            
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
            
            setTimeout(() => {
                alert('File Excel daftar karyawan berhasil didownload!');
            }, 500);
        }

        function exportAllAttendance() {
            if (attendanceData.length === 0) {
                alert('Tidak ada data absensi untuk diekspor!');
                return;
            }
            
            // Sort attendance data by date (newest first)
            const sortedData = attendanceData.sort((a, b) => new Date(b.date) - new Date(a.date));
            
            // Create Excel content for all attendance
            const excelContent = `
                <html>
                <head>
                    <meta charset="UTF-8">
                    <style>
                        table { border-collapse: collapse; width: 100%; }
                        th, td { border: 1px solid #000; padding: 8px; text-align: left; }
                        th { background-color: #4472C4; color: white; font-weight: bold; }
                        .center { text-align: center; }
                        .number { text-align: right; }
                    </style>
                </head>
                <body>
                    <h2>Laporan Absensi Semua Karyawan MOTIONLIFE MEDICAL CENTER</h2>
                    <p><strong>Tanggal Export:</strong> ${new Date().toLocaleDateString('id-ID')}</p>
                    <p><strong>Total Record:</strong> ${attendanceData.length} absensi</p>
                    <p><strong>Periode:</strong> ${attendanceData.length > 0 ? new Date(Math.min(...attendanceData.map(r => new Date(r.date)))).toLocaleDateString('id-ID') : '-'} s/d ${attendanceData.length > 0 ? new Date(Math.max(...attendanceData.map(r => new Date(r.date)))).toLocaleDateString('id-ID') : '-'}</p>
                    <br>
                    <table>
                        <thead>
                            <tr>
                                <th>No</th>
                                <th>Nama</th>
                                <th>Jabatan</th>
                                <th>Departemen</th>
                                <th>Tanggal</th>
                                <th>Hari</th>
                                <th>Shift</th>
                                <th>Jam Masuk</th>
                                <th>Jam Keluar</th>
                                <th>Total Jam</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${sortedData.map((record, index) => {
                                const date = new Date(record.date);
                                const clockIn = record.clockIn ? new Date(record.clockIn).toLocaleTimeString('id-ID', {hour: '2-digit', minute: '2-digit'}) : '-';
                                const clockOut = record.clockOut ? new Date(record.clockOut).toLocaleTimeString('id-ID', {hour: '2-digit', minute: '2-digit'}) : '-';
                                
                                let hours = 0;
                                let status = 'Belum Lengkap';
                                let statusColor = '#FFC107';
                                
                                if (record.clockIn && record.clockOut) {
                                    hours = (new Date(record.clockOut) - new Date(record.clockIn)) / (1000 * 60 * 60);
                                    status = hours >= 7 ? 'Lengkap' : 'Kurang';
                                    statusColor = hours >= 7 ? '#28A745' : '#FD7E14';
                                }
                                
                                return `
                                    <tr>
                                        <td class="center">${index + 1}</td>
                                        <td>${record.userName}</td>
                                        <td>${record.position}</td>
                                        <td class="center">${record.department}</td>
                                        <td class="center">${date.toLocaleDateString('id-ID')}</td>
                                        <td>${date.toLocaleDateString('id-ID', {weekday: 'long'})}</td>
                                        <td class="center">${record.shiftName}</td>
                                        <td class="center">${clockIn}</td>
                                        <td class="center">${clockOut}</td>
                                        <td class="number">${hours > 0 ? hours.toFixed(1) + ' jam' : '-'}</td>
                                        <td class="center" style="background-color: ${statusColor}; color: white;">${status}</td>
                                    </tr>
                                `;
                            }).join('')}
                        </tbody>
                    </table>
                    <br>
                    <h3>Ringkasan:</h3>
                    <table style="width: 60%;">
                        <thead>
                            <tr>
                                <th>Keterangan</th>
                                <th>Jumlah</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Total Absensi</td>
                                <td class="center">${attendanceData.length}</td>
                            </tr>
                            <tr>
                                <td>Shift Lengkap (≥7 jam)</td>
                                <td class="center">${attendanceData.filter(r => r.clockIn && r.clockOut && (new Date(r.clockOut) - new Date(r.clockIn)) / (1000 * 60 * 60) >= 7).length}</td>
                            </tr>
                            <tr>
                                <td>Shift Belum Lengkap</td>
                                <td class="center">${attendanceData.filter(r => !r.clockIn || !r.clockOut).length}</td>
                            </tr>
                            <tr>
                                <td>Total Jam Kerja</td>
                                <td class="center">${attendanceData.reduce((total, record) => {
                                    if (record.clockIn && record.clockOut) {
                                        return total + (new Date(record.clockOut) - new Date(record.clockIn)) / (1000 * 60 * 60);
                                    }
                                    return total;
                                }, 0).toFixed(1)} jam</td>
                            </tr>
                        </tbody>
                    </table>
                </body>
                </html>
            `;
            
            const blob = new Blob([excelContent], { 
                type: 'application/vnd.ms-excel;charset=utf-8' 
            });
            
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `Absensi_Semua_Karyawan_${new Date().toISOString().split('T')[0]}.xls`;
            
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
            
            setTimeout(() => {
                alert('File Excel absensi semua karyawan berhasil didownload!');
            }, 500);
        }

        function deleteAllData() {
            if (confirm('PERINGATAN: Ini akan menghapus SEMUA data karyawan dan absensi (kecuali admin). Apakah Anda yakin?')) {
                if (confirm('Konfirmasi sekali lagi: Semua data akan hilang permanen!')) {
                    users = users.filter(user => user.isAdmin);
                    attendanceData = [];
                    
                    localStorage.setItem('multiShiftUsers', JSON.stringify(users));
                    localStorage.setItem('multiShiftAttendance', JSON.stringify(attendanceData));
                    
                    loadAdminData();
                    alert('Semua data berhasil dihapus!');
                }
            }
        }

        // Add event listener for filter
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(() => {
                const filterUser = document.getElementById('filterUser');
                if (filterUser) {
                    filterUser.addEventListener('change', loadAllAttendance);
                }
            }, 1000);
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'96ee84b3a4e44100',t:'MTc1NTE1NDIzMC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
